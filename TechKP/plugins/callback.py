import logging, asyncio, time, pytz, re, os, math, random
import json
import pyrogram
from pyrogram.handlers import CallbackQueryHandler
from pyrogram import errors, filters, types, Client, enums
from ..database import configDB as config_db
from ..utils.botTools import CONFIGURABLE, get_bool, get_buttons
from TechKP.config.Script import script
from ..utils.cache import Cache
from ..utils.logger import LOGGER
from ..config import Config
from pyrogram.errors import FloodWait, UserIsBlocked, MessageNotModified, PeerIdInvalid, ChatAdminRequired
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto, ChatPermissions, WebAppInfo
from TechKP.database.db import db 
from ..utils.botTools import (
    check_fsub,
    format_buttons,
    get_size,
    unpack_new_file_id,
    FORCE_TEXT,
    check_verification,
    get_status,
    handle_next_back
)
from imdb import Cinemagoer 
from ..database import a_filter, b_filter
import re, time, datetime
from ..utils.botTools import get_readable_time

logger = LOGGER("INDEX")
ia = Cinemagoer()


from ..config import Config
from pyrogram import enums, errors, filters, types, Client
from ..database import configDB as config_db
from ..utils.botTools import CONFIGURABLE, get_bool, get_buttons


@Client.on_message(filters.command("settings") & filters.user(Config.ADMINS))  # type: ignore
async def handle_settings(bot: Client, msg: types.Message):
    if msg.chat.type == enums.ChatType.PRIVATE:
        settings = await config_db.get_settings(f"SETTINGS_PM")
    else:
        settings = await config_db.get_settings(f"SETTINGS_{msg.chat.id}")

    await msg.reply(
        "Configure your bot here", reply_markup=types.InlineKeyboardMarkup(get_buttons(settings))  # type: ignore
    )

@Client.on_callback_query(filters.regex("^settings"))  # type: ignore
async def setup_settings(bot, query: types.CallbackQuery):
    if query.from_user.id not in Config.ADMINS:
        return await query.answer("This is not for you!")
    set_type, key = query.data.split("#")  # type: ignore
    if set_type == "settings_info":
        return await query.answer(CONFIGURABLE[key]["help"], show_alert=True)  # type: ignore

    # setattr(Config, key, get_bool(getattr(Config, key)))
    if query.message.chat.type == enums.ChatType.PRIVATE:
        data_key = "SETTINGS_PM"
    else:
        data_key = f"SETTINGS_{query.message.chat.id}"
    settings = await config_db.get_settings(data_key)
    settings[key] = get_bool(settings.get(key, True))  # type: ignore
    # setattr(Config, key, settings[key])


    await config_db.update_config(data_key, settings)
    await query.answer()
    try:
        await query.edit_message_reply_markup(types.InlineKeyboardMarkup(get_buttons(settings)))  # type: ignore
    except errors.MessageNotModified:
        pass


@Client.on_callback_query(filters.regex(r"^free_users_next"))
async def free_users_next_page(client, query):
    _, offset = query.data.split("#")
    offset = int(offset)
    users, n_offset, total, max_btn = await handle_next_back(await db.get_all_users(), offset=offset, max_results=30)
    b_offset = offset - max_btn

    if n_offset == 0:
        btn = [[
            InlineKeyboardButton("Back", callback_data=f"free_users_next#{b_offset}"),
            InlineKeyboardButton(f"Page {math.ceil(offset / max_btn) + 1} / {math.ceil(total / max_btn)}", callback_data="bar")
        ]]
    elif offset == 0:
        btn = [[
            InlineKeyboardButton(f"Page {math.ceil(offset / max_btn) + 1} / {math.ceil(total / max_btn)}", callback_data="bar"),
            InlineKeyboardButton("Next", callback_data=f"free_users_next#{n_offset}")
        ]]
    else:
        btn = [[
            InlineKeyboardButton("Back", callback_data=f"free_users_next#{b_offset}"),
            InlineKeyboardButton(f"{math.ceil(offset / max_btn) + 1} / {math.ceil(total / max_btn)}", callback_data="bar"),
            InlineKeyboardButton("Next", callback_data=f"free_users_next#{n_offset}")
        ]]

    text = ""
    for user_num, user in enumerate(users, start=offset+1):
        try:
            user_info = await client.get_users([user['id']])
            text += f"{user_num}. <a href='tg://user?id={user['id']}'>{user_info[0].mention}</a> [<code>{user['id']}</code>]\n\n"
        except (PeerIdInvalid, ChannelInvalid, BadRequest) as e:
            logging.warning(f"Invalid user ID: {user['id']} - Error: {str(e)}")
            text += f"{user_num}. <code>{user['id']}</code> (Invalid ID)\n\n"
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(btn))


@Client.on_callback_query(filters.regex(r"^premium_next"))
async def premium_users_dbnext_page(client, query):
    _, offset = query.data.split("#")
    offset = int(offset)
    users, n_offset, total, max_btn = await handle_next_back(await db.get_premium_users(), offset=offset, max_results=30)
    b_offset = offset - max_btn

    if n_offset == 0:
        btn = [[
            InlineKeyboardButton("Back", callback_data=f"premium_next#{b_offset}"),
            InlineKeyboardButton(f"Page {math.ceil(offset / max_btn) + 1} / {math.ceil(total / max_btn)}", callback_data="bar")
        ]]
    elif offset == 0:
        btn = [[
            InlineKeyboardButton(f"Page {math.ceil(offset / max_btn) + 1} / {math.ceil(total / max_btn)}", callback_data="bar"),
            InlineKeyboardButton("Next", callback_data=f"premium_next#{n_offset}")
        ]]
    else:
        btn = [[
            InlineKeyboardButton("Back", callback_data=f"premium_next#{b_offset}"),
            InlineKeyboardButton(f"{math.ceil(offset / max_btn) + 1} / {math.ceil(total / max_btn)}", callback_data="bar"),
            InlineKeyboardButton("Next", callback_data=f"premium_next#{n_offset}")
        ]]

    text = ""
    for user_num, user in enumerate(users, start=offset+1):
        try:
            user_info = await client.get_users(user['_id'])
            text += f"{user_num}. <a href='tg://user?id={user['_id']}'>{user_info.mention}</a> [<code>{user['_id']}</code>]\n\n"
        except PeerIdInvalid:
            logging.warning(f"Invalid user ID: {user['_id']}")
            text += f"{user_num}. <code>{user['_id']}</code> (Invalid ID)\n\n"
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(btn))



@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    try:
        link = await client.create_chat_invite_link(int(Config.REQST_CHANNEL))
    except:
        pass
    if query.data == "close_data":
        try:
            user = query.message.reply_to_message.from_user.id
        except:
            user = query.from_user.id
        if int(user) != 0 and query.from_user.id != int(user):
            return await query.answer(script.ALRT_TXT, show_alert=True)
        await query.answer("·¥õ ú·¥Ä…¥·¥ãs Íú∞·¥è Ä ·¥Ñ ü·¥ès·¥á üôà")
        await query.message.delete()
        try:
            await query.message.reply_to_message.delete()
        except:
            pass
    elif query.data == "buttons":
        await query.answer("…¥·¥è ·¥ç·¥è Ä·¥á ·¥ò·¥Ä…¢·¥ás üòä", show_alert=True)
    elif query.data == "pages":
        await query.answer("·¥õ ú…™s …™s ·¥ò·¥Ä…¢·¥ás  ô·¥ú·¥õ·¥õ·¥è…¥ üòÖ")

    elif query.data == "popularmovies":
        buttons = [[
            InlineKeyboardButton('‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='start'),
        ]]
        popular_movies = ia.get_popular100_movies()[:25]
        response_text = "<b>Top 25 Popular Movies:</b>\n\n"
        for idx, movie in enumerate(popular_movies, start=1):
            title = movie.get('title')
            response_text += f"{idx}. {title}\n"
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=response_text,
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )

    elif query.data == "popmovie":
        popular_movies = ia.get_popular100_movies()[:25]
        response_text = "<b>Top 25 Popular Movies:</b>\n\n"
        for idx, movie in enumerate(popular_movies, start=1):
            title = movie.get('title')
            response_text += f"{idx}. {title}\n"
            await query.message.edit_text(
                text=response_text,
                parse_mode=enums.ParseMode.HTML
            )


    elif query.data == "start":
        buttons = [[
            types.InlineKeyboardButton('üîñ Join Our Group to Use Me', url="https://t.me/MKS_RequestGroup")
        ],[
            types.InlineKeyboardButton('‚öô Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥ás', callback_data='features'),
            types.InlineKeyboardButton('üéóÔ∏è  ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç', callback_data='premium'),
        ],[
            types.InlineKeyboardButton('I…¥ ü…™…¥·¥á S·¥á·¥Ä Ä·¥Ñ ú ‚òå', switch_inline_query_current_chat=''),
            types.InlineKeyboardButton('‚úá P·¥è·¥ò·¥ú ü·¥Ä Ä M·¥è·¥†…™·¥ás ‚úá', callback_data='popularmovies')
        ],[
            types.InlineKeyboardButton('‚å¨ M·¥è·¥†…™·¥á G Ä·¥è·¥ú·¥ò', url=Config.GROUPS_LINK),
            types.InlineKeyboardButton('‚úá J·¥è…™…¥ U·¥ò·¥Ö·¥Ä·¥õ·¥ás C ú·¥Ä…¥…¥·¥á ü ‚úá', url=Config.CHANNEL_LINK)
        ],[
            types.InlineKeyboardButton('„ÄÑ H·¥á ü·¥ò', callback_data='help'),
            types.InlineKeyboardButton('ü´† ·¥Ä ô·¥è·¥ú·¥õ üö©', callback_data='about')
        ],[
            types.InlineKeyboardButton('ü§ûüèª  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ü§°', callback_data='admin')
        ]]
        reply_markup = types.InlineKeyboardMarkup(buttons)            
        await query.edit_message_media(
            media=types.InputMediaPhoto(
                media=random.choice(Config.START_IMG),
                caption=script.START_TXT.format(query.from_user.mention, get_status(), query.from_user.id)
            ),
            reply_markup=reply_markup
        )
    elif query.data == "admin":
        buttons = [[
            InlineKeyboardButton('S·¥è·¥ú Ä·¥Ñ·¥á C·¥è·¥Ö·¥á', url="https://t.me/KOPAINGLAY15")
        ],[
            InlineKeyboardButton('‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='start'),
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.OWNER_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "help":
        buttons = [[
            InlineKeyboardButton('‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='start')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.HELP_TEXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "premium":
        userid = query.from_user.id
        await query.message.edit(script.PREMIUM_TEXT , reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton('ü§ûüèª  ü·¥è·¥° ·¥ò Ä…™·¥Ñ·¥á ·¥ò ü·¥Ä…¥s üçø', callback_data='plans')],
        [InlineKeyboardButton('‚ãû  ú·¥è·¥ç·¥á', callback_data='start')]
        ]))

    elif query.data == "plans":
        userid = query.from_user.id
        await query.edit_message_media(
            media=types.InputMediaPhoto(
                media=random.choice(Config.START_IMG),
                caption=script.PLAN_TEXT
            ),
            reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton('ü§ûüèª  ô·¥ú è ·¥ò ü·¥Ä…¥ üçø', callback_data='buy_plan')],
        [InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='premium')]
        ]))

    elif query.data == "buy_plan":
        userid = query.from_user.id
        await query.edit_message_media(
            media=types.InputMediaPhoto(
                media=Config.PAYMENT_QR,
                caption=script.BUY_PLAN.format(Cache.B_LINK)
            ),
            reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='plans')]
        ]))

    elif query.data == "features":
        buttons = [[
            InlineKeyboardButton('üì∏ ·¥õ-…¢ Ä·¥Ä·¥ò ú', callback_data='telegraph'),
            InlineKeyboardButton('üÜéÔ∏è “ì·¥è…¥·¥õ', callback_data='font')    
        ],[ 
            InlineKeyboardButton('·¥ús·¥á Ä ·¥Ñ·¥ç·¥Ö', callback_data='usercmd'),
            InlineKeyboardButton('·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥ç·¥Ö', callback_data='extra'),
        ],[ 
	    InlineKeyboardButton('‚ãû  ú·¥è·¥ç·¥á', callback_data='start')
        ]] 
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(                     
            text=script.HELP_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "extra":
        buttons = [[
            InlineKeyboardButton('·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥ç·¥Ö', callback_data='admincmd'),
            InlineKeyboardButton('‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='features')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.EXTRAMOD_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "admincmd":
        #if user isnt admin then return
        if not query.from_user.id in Config.ADMINS:
            return await query.answer('This Feature Is Only For Admins !' , show_alert=True)
        buttons = [
            [InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='features')],
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.ADMIN_CMD_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML,
        )

    elif query.data == "usercmd":
        buttons = [
            [InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='features')],
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.USER_CMD_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML,
        )

    elif query.data == 'about':
        await query.message.edit_text(
            script.ABOUT_TEXT.format(query.from_user.mention(),Cache.B_LINK),
            reply_markup = InlineKeyboardMarkup(
                [[InlineKeyboardButton('‚ãû  ú·¥è·¥ç·¥á', callback_data='start')]]
                ),
            disable_web_page_preview = True
        )

    elif query.data == "telegraph":
        buttons = [[
            InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='features')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)  
        await query.message.edit_text(
            text=script.TELE_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "font":
        buttons = [[
            InlineKeyboardButton('‚ãû  ô·¥Ä·¥Ñ·¥ã', callback_data='features')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons) 
        await query.message.edit_text(
            text=script.FONT_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
	)
  

    elif query.data.startswith("show_options"):
        ident, user_id, msg_id = query.data.split("#")
        chnl_id = query.message.chat.id
        userid = query.from_user.id
        buttons = [[
            types.InlineKeyboardButton("‚úÖÔ∏è ·¥Ä·¥Ñ·¥Ñ·¥á·¥ò·¥õ ·¥õ ú…™Íú±  Ä·¥á«´·¥ú·¥áÍú±·¥õ ‚úÖÔ∏è", callback_data=f"accept#{user_id}#{msg_id}")
        ],[
            types.InlineKeyboardButton("üö´  Ä·¥á·¥ä·¥á·¥Ñ·¥õ ·¥õ ú…™Íú±  Ä·¥á«´·¥ú·¥áÍú±·¥õ üö´", callback_data=f"reject#{user_id}#{msg_id}")
        ]]
        try:
            st = await client.get_chat_member(chnl_id, userid)
            if (st.status == enums.ChatMemberStatus.ADMINISTRATOR) or (st.status == enums.ChatMemberStatus.OWNER):
                await query.message.edit_reply_markup(types.InlineKeyboardMarkup(buttons))
            elif st.status == enums.ChatMemberStatus.MEMBER:
                await query.answer(script.ALRT_TXT, show_alert=True)
        except pyrogram.errors.exceptions.bad_request_400.UserNotParticipant:
            await query.answer("‚ö†Ô∏è  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä ·¥èÍú∞ ·¥õ ú…™Íú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü, Íú∞…™ ÄÍú±·¥õ ·¥ä·¥è…™…¥", show_alert=True)

    elif query.data.startswith("reject"):
        ident, user_id, msg_id = query.data.split("#")
        chnl_id = query.message.chat.id
        userid = query.from_user.id
        buttons = [[
            types.InlineKeyboardButton("‚úó  Ä·¥á·¥ä·¥á·¥Ñ·¥õ ‚úó", callback_data=f"rj_alert#{user_id}")
        ]]
        btn = [[
            types.InlineKeyboardButton("‚ôªÔ∏è ·¥†…™·¥á·¥° s·¥õ·¥Ä·¥õ·¥ús ‚ôªÔ∏è", url=f"{query.message.link}")
        ]]
        st = await client.get_chat_member(chnl_id, userid)
        if (st.status == enums.ChatMemberStatus.ADMINISTRATOR) or (st.status == enums.ChatMemberStatus.OWNER):
            user = await client.get_users(user_id)
            request = query.message.text
            await query.answer("Message sent to requester")
            await query.message.edit_text(f"<s>{request}</s>")
            await query.message.edit_reply_markup(types.InlineKeyboardMarkup(buttons))
            try:
                await client.send_message(chat_id=user_id, text="<b>s·¥è Ä Ä è  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s  Ä·¥á·¥ä·¥á·¥Ñ·¥õ·¥á·¥Ö üò∂</b>", reply_markup=types.InlineKeyboardMarkup(btn))
            except UserIsBlocked:
                await client.send_message(Config.REQUEST_CHANNEL, text=f"<b>üí•  ú·¥á ü ü·¥è {user.mention},\n\ns·¥è Ä Ä è  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s  Ä·¥á·¥ä·¥á·¥Ñ·¥õ·¥á·¥Ö üò∂</b>", reply_markup=types.InlineKeyboardMarkup(btn), reply_to_message_id=int(msg_id))
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)

    elif query.data.startswith("accept"):
        ident, user_id, msg_id = query.data.split("#")
        chnl_id = query.message.chat.id
        userid = query.from_user.id
        buttons = [[
            types.InlineKeyboardButton("üòä ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á üòä", callback_data=f"already_available#{user_id}#{msg_id}")
        ],[
            types.InlineKeyboardButton("‚ÄºÔ∏è …¥·¥è·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ‚ÄºÔ∏è", callback_data=f"not_available#{user_id}#{msg_id}")
        ],[
            types.InlineKeyboardButton("ü•µ ·¥õ·¥á ü ü ·¥ç·¥á  è·¥á·¥Ä Ä ü•µ", callback_data=f"year#{user_id}#{msg_id}")
        ],[
            types.InlineKeyboardButton("üôÉ ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö …™…¥ 1  ú·¥è·¥ú Ä üôÉ", callback_data=f"upload_in#{user_id}#{msg_id}")
        ],[
            types.InlineKeyboardButton("‚òá ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö ‚òá", callback_data=f"uploaded#{user_id}#{msg_id}")
        ]]
        try:
            st = await client.get_chat_member(chnl_id, userid)
            if (st.status == enums.ChatMemberStatus.ADMINISTRATOR) or (st.status == enums.ChatMemberStatus.OWNER):
                await query.message.edit_reply_markup(types.InlineKeyboardMarkup(buttons))
            elif st.status == enums.ChatMemberStatus.MEMBER:
                await query.answer(script.OLD_ALRT_TXT.format(query.from_user.first_name),show_alert=True)
        except pyrogram.errors.exceptions.bad_request_400.UserNotParticipant:
            await query.answer("‚ö†Ô∏è  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä ·¥èÍú∞ ·¥õ ú…™Íú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü, Íú∞…™ ÄÍú±·¥õ ·¥ä·¥è…™…¥", show_alert=True)

    elif query.data.startswith("not_available"):
        ident, user_id, msg_id = query.data.split("#")
        chnl_id = query.message.chat.id
        userid = query.from_user.id
        buttons = [[
            InlineKeyboardButton("üö´ …¥·¥è·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á üö´", callback_data=f"na_alert#{user_id}")
        ]]
        btn = [[
            InlineKeyboardButton("‚ôªÔ∏è ·¥†…™·¥á·¥° s·¥õ·¥Ä·¥õ·¥ús ‚ôªÔ∏è", url=f"{query.message.link}")
        ]]
        st = await client.get_chat_member(chnl_id, userid)
        if (st.status == enums.ChatMemberStatus.ADMINISTRATOR) or (st.status == enums.ChatMemberStatus.OWNER):
            user = await client.get_users(user_id)
            request = query.message.text
            await query.answer("Message sent to requester")
            await query.message.edit_text(f"<s>{request}</s>")
            await query.message.edit_reply_markup(InlineKeyboardMarkup(buttons))
            try:
                await client.send_message(chat_id=user_id, text="<b>s·¥è Ä Ä è  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s …¥·¥è·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á üò¢</b>", reply_markup=InlineKeyboardMarkup(btn))
            except UserIsBlocked:
                await client.send_message(Config.REQUEST_CHANNEL, text=f"<b>üí•  ú·¥á ü ü·¥è {user.mention},\n\ns·¥è Ä Ä è  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s …¥·¥è·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á üò¢</b>", reply_markup=InlineKeyboardMarkup(btn), reply_to_message_id=int(msg_id))
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)

    elif query.data.startswith("uploaded"):
        ident, user_id, msg_id = query.data.split("#")
        chnl_id = query.message.chat.id
        userid = query.from_user.id
        buttons = [[
            InlineKeyboardButton("üôÇ ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö üôÇ", callback_data=f"ul_alert#{user_id}")
        ]]
        btn = [[
            InlineKeyboardButton("‚ôªÔ∏è ·¥†…™·¥á·¥° s·¥õ·¥Ä·¥õ·¥ús ‚ôªÔ∏è", url=f"{query.message.link}")
        ]]
        st = await client.get_chat_member(chnl_id, userid)
        if (st.status == enums.ChatMemberStatus.ADMINISTRATOR) or (st.status == enums.ChatMemberStatus.OWNER):
            user = await client.get_users(user_id)
            request = query.message.text
            await query.answer("Message sent to requester")
            await query.message.edit_text(f"<s>{request}</s>")
            await query.message.edit_reply_markup(InlineKeyboardMarkup(buttons))
            try:
                await client.send_message(chat_id=user_id, text="<b> è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö ‚ò∫Ô∏è</b>", reply_markup=InlineKeyboardMarkup(btn))
            except UserIsBlocked:
                await client.send_message(Config.REQUEST_CHANNEL, text=f"<b>üí•  ú·¥á ü ü·¥è {user.mention},\n\n è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö ‚ò∫Ô∏è</b>", reply_markup=InlineKeyboardMarkup(btn), reply_to_message_id=int(msg_id))
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)

    elif query.data.startswith("already_available"):
        ident, user_id, msg_id = query.data.split("#")
        chnl_id = query.message.chat.id
        userid = query.from_user.id
        buttons = [[
            InlineKeyboardButton("ü´§ ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ü´§", callback_data=f"aa_alert#{user_id}")
        ]]
        btn = [[
            InlineKeyboardButton("‚ôªÔ∏è ·¥†…™·¥á·¥° s·¥õ·¥Ä·¥õ·¥ús ‚ôªÔ∏è", url=f"{query.message.link}")
        ]]
        st = await client.get_chat_member(chnl_id, userid)
        if (st.status == enums.ChatMemberStatus.ADMINISTRATOR) or (st.status == enums.ChatMemberStatus.OWNER):
            user = await client.get_users(user_id)
            request = query.message.text
            await query.answer("Message sent to requester")
            await query.message.edit_text(f"<s>{request}</s>")
            await query.message.edit_reply_markup(InlineKeyboardMarkup(buttons))
            try:
                await client.send_message(chat_id=user_id, text="<b> è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á üòã</b>", reply_markup=InlineKeyboardMarkup(btn))
            except UserIsBlocked:
                await client.send_message(Config.REQUEST_CHANNEL, text=f"<b>üí•  ú·¥á ü ü·¥è {user.mention},\n\n è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á üòã</b>", reply_markup=InlineKeyboardMarkup(btn), reply_to_message_id=int(msg_id))
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)

    elif query.data.startswith("upload_in"):
        ident, user_id, msg_id = query.data.split("#")
        chnl_id = query.message.chat.id
        userid = query.from_user.id
        buttons = [[
            InlineKeyboardButton("üòå ·¥ú·¥ò ü·¥è·¥Ä·¥Ö …™…¥ 1  ú·¥è·¥ú ÄÍú± üòå", callback_data=f"upload_alert#{user_id}")
        ]]
        btn = [[
            InlineKeyboardButton("‚ôªÔ∏è ·¥†…™·¥á·¥° s·¥õ·¥Ä·¥õ·¥ús ‚ôªÔ∏è", url=f"{query.message.link}")
        ]]
        st = await client.get_chat_member(chnl_id, userid)
        if (st.status == enums.ChatMemberStatus.ADMINISTRATOR) or (st.status == enums.ChatMemberStatus.OWNER):
            user = await client.get_users(user_id)
            request = query.message.text
            await query.answer("Message sent to requester")
            await query.message.edit_text(f"<s>{request}</s>")
            await query.message.edit_reply_markup(InlineKeyboardMarkup(buttons))
            try:
                await client.send_message(chat_id=user_id, text="<b> è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ ·¥°…™ ü ü  ô·¥á ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥°…™·¥õ ú…™…¥ 1  ú·¥è·¥ú Ä üòÅ</b>", reply_markup=InlineKeyboardMarkup(btn))
            except UserIsBlocked:
                await client.send_message(Config.REQUEST_CHANNEL, text=f"<b>üí•  ú·¥á ü ü·¥è {user.mention},\n\n è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ ·¥°…™ ü ü  ô·¥á ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥°…™·¥õ ú…™…¥ 1  ú·¥è·¥ú Ä üòÅ</b>", reply_markup=InlineKeyboardMarkup(btn), reply_to_message_id=int(msg_id))
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)

    elif query.data.startswith("year"):
        ident, user_id, msg_id = query.data.split("#")
        chnl_id = query.message.chat.id
        userid = query.from_user.id
        buttons = [[
            InlineKeyboardButton("‚ö†Ô∏è ·¥õ·¥á ü ü ·¥ç·¥á  è·¥á·¥Ä ÄÍú± ‚ö†Ô∏è", callback_data=f"yrs_alert#{user_id}")
        ]]
        btn = [[
            InlineKeyboardButton("‚ôªÔ∏è ·¥†…™·¥á·¥° s·¥õ·¥Ä·¥õ·¥ús ‚ôªÔ∏è", url=f"{query.message.link}")
        ]]
        st = await client.get_chat_member(chnl_id, userid)
        if (st.status == enums.ChatMemberStatus.ADMINISTRATOR) or (st.status == enums.ChatMemberStatus.OWNER):
            user = await client.get_users(user_id)
            request = query.message.text
            await query.answer("Message sent to requester")
            await query.message.edit_text(f"<s>{request}</s>")
            await query.message.edit_reply_markup(InlineKeyboardMarkup(buttons))
            try:
                await client.send_message(chat_id=user_id, text="<b> ô Ä·¥è ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥õ·¥á ü ü ·¥ç·¥á  è·¥á·¥Ä ÄÍú±, ·¥õ ú·¥á…¥ …™ ·¥°…™ ü ü ·¥ú·¥ò ü·¥è·¥Ä·¥Ö üò¨</b>", reply_markup=InlineKeyboardMarkup(btn))
            except UserIsBlocked:
                await client.send_message(Config.REQUEST_CHANNEL, text=f"<b>üí•  ú·¥á ü ü·¥è {user.mention},\n\n ô Ä·¥è ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥õ·¥á ü ü ·¥ç·¥á  è·¥á·¥Ä ÄÍú± , ·¥õ ú·¥á…¥ …™ ·¥°…™ ü ü ·¥ú·¥ò ü·¥è·¥Ä·¥Ö üò¨</b>", reply_markup=InlineKeyboardMarkup(btn), reply_to_message_id=int(msg_id))
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)

    elif query.data.startswith("rj_alert"):
        ident, user_id = query.data.split("#")
        userid = query.from_user.id
        if str(userid) in user_id:
            await query.answer("s·¥è Ä Ä è  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s  Ä·¥á·¥ä·¥á·¥Ñ·¥õ", show_alert=True)
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)

    elif query.data.startswith("na_alert"):
        ident, user_id = query.data.split("#")
        userid = query.from_user.id
        if str(userid) in user_id:
            await query.answer("s·¥è Ä Ä è  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s …¥·¥è·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á", show_alert=True)
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)

    elif query.data.startswith("ul_alert"):
        ident, user_id = query.data.split("#")
        userid = query.from_user.id
        if str(userid) in user_id:
            await query.answer(" è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö", show_alert=True)
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)

    elif query.data.startswith("aa_alert"):
        ident, user_id = query.data.split("#")
        userid = query.from_user.id
        if str(userid) in user_id:
            await query.answer(" è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á", show_alert=True)
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)

    elif query.data.startswith("upload_alert"):
        ident, user_id = query.data.split("#")
        userid = query.from_user.id
        if str(userid) in user_id:
            await query.answer(" è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ ·¥°…™ ü ü  ô·¥á ·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥°…™·¥õ ú…™…¥ 1  ú·¥è·¥ú Ä üòÅ", show_alert=True)
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)

    elif query.data.startswith("yrs_alert"):
        ident, user_id = query.data.split("#")
        userid = query.from_user.id
        if str(userid) in user_id:
            await query.answer(" ô Ä·¥è ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥õ·¥á ü ü ·¥ç·¥á  è·¥á·¥Ä ÄÍú±, ·¥õ ú·¥á…¥ …™ ·¥°…™ ü ü ·¥ú·¥ò ü·¥è·¥Ä·¥Ö üò¨", show_alert=True)
        else:
            await query.answer(script.ALRT_TXT, show_alert=True)



    elif query.data.startswith("batchfiles"):
        clicked = query.from_user.id
        ident, key = query.data.split("#")
        try:
            await query.answer(url=f"https://telegram.me/{Cache.U_NAME}?start=all_{key}")
        except UserIsBlocked:
            await query.answer('U…¥ ô ü·¥è·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥è·¥õ ·¥ç·¥Ä ú…¥ !', show_alert=True)
        except Exception as e:
            logger.exception(e)
            await query.answer(url=f"https://telegram.me/{Cache.U_NAME}?start=all_{key}")

    
    elif query.data == "translatemm":
        btn = [        
            [InlineKeyboardButton("Translate English", callback_data="translateen")],    
            [InlineKeyboardButton("Íú±·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ  Ä·¥á·¥Ñ·¥á…™·¥ò·¥õ üßæ", url=f"https://t.me/KOPAINGLAY15")],
            [InlineKeyboardButton("‚ö†Ô∏è ·¥Ñ ü·¥ès·¥á / ·¥Ö·¥á ü·¥á·¥õ·¥á ‚ö†Ô∏è", callback_data="close_data")]
        ]
        reply_markup = InlineKeyboardMarkup(btn)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(Config.PAYMENT_QR)
        )
        await query.message.edit_text(
            text=Config.PAYMENT_TEXTMM,
            reply_markup=reply_markup
        )

    elif query.data == "translateen":
        btn = [        
            [InlineKeyboardButton("Translate Myanmar", callback_data="translatemm")],    
            [InlineKeyboardButton("Íú±·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ  Ä·¥á·¥Ñ·¥á…™·¥ò·¥õ üßæ", url=f"https://t.me/KOPAINGLAY15")],
            [InlineKeyboardButton("‚ö†Ô∏è ·¥Ñ ü·¥ès·¥á / ·¥Ö·¥á ü·¥á·¥õ·¥á ‚ö†Ô∏è", callback_data="close_data")]
        ]
        reply_markup = InlineKeyboardMarkup(btn)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(Config.PAYMENT_QR)
        )
        await query.message.edit_text(
            text=Config.PAYMENT_TEXT,
            reply_markup=reply_markup
        )

    elif query.data.startswith("delfile"):
        ident, file_id = query.data.split("#")
        await query.answer(url=f"https://telegram.me/{Cache.U_NAME}?start=files_{file_id}")



